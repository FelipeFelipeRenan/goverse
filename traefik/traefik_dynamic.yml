http:
  middlewares:
    auth:
      forwardAuth:
        address: "http://auth-middleware:3000/auth/validate"
        trustForwardHeader: true
        authResponseHeaders:
          - "X-User-ID"

    rate-limit:
      rateLimit:
        average: 100
        burst: 50

    cors:
      headers:
        accessControlAllowOriginList:
          - "*"
        accessControlAllowMethods:
          - GET
          - POST
          - PUT
          - DELETE
          - OPTIONS
        accessControlAllowHeaders:
          - Content-Type
          - Authorization
          - X-User-ID
        addVaryHeader: true

    logging:
      headers:
        customRequestHeaders:
          X-Request-Id: "{uuid}"

  routers:
    # Auth service
    auth-login:
      rule: "Path(`/auth/login`)"
      service: auth-service
      entryPoints: [web]
      middlewares: [cors, logging]

    oauth-google:
      rule: "Path(`/oauth/google/login`)"
      service: auth-service
      entryPoints: [web]
      middlewares: [cors, logging]
    oauth-google-callback:
      rule: "Path(`/oauth/google/callback`) && (Method(`GET`) || Method(`OPTIONS`))"
      service: auth-service
      entryPoints: [web]
      middlewares: [cors, logging]

    # User service
    user-register:
      rule: "Path(`/user`) && (Method(`POST`) || Method(`OPTIONS`))"
      service: user-service
      entryPoints: [web]
      middlewares: [cors, logging]

    user-getall:
      rule: "Path(`/users`) && (Method(`GET`) || Method(`OPTIONS`))"
      service: user-service
      entryPoints: [web]
      middlewares: [cors, logging]

    user-get:
      rule: "Path(`/user/rooms`) && (Method(`GET`) || Method(`OPTIONS`))"
      service: room-service
      entryPoints: [web]
      middlewares: [cors, logging, auth]

    user-me-update:
      rule: "Path(`/user/me`) && (Method(`PUT`) || Method(`OPTIONS`))"
      service: user-service
      entryPoints: [web]
      middlewares: [cors, logging, auth]

    user-me-delete:
      rule: "Path(`/user/me`) && (Method(`DELETE`) || Method(`OPTIONS`))"
      service: user-service
      entryPoints: [web]
      middlewares: [cors, logging, auth]

    # CORS fix para /user/{id}
    user-get-by-id:
      rule: "(PathPrefix(`/user/`) && (Method(`GET`) || Method(`OPTIONS`)))"
      service: user-service
      entryPoints: [web]
      middlewares: [cors, logging, auth]

    # Room service
    rooms-list:
      rule: "Path(`/rooms`) && (Method(`GET`) || Method(`OPTIONS`))"
      service: room-service
      entryPoints: [web]
      middlewares: [cors, logging]

    rooms-mine:
      rule: "Path(`/rooms/mine`) && (Method(`GET`) || Method(`OPTIONS`))"
      service: room-service
      entryPoints: [web]
      middlewares: [cors, logging, auth]

    rooms-prefix:
      rule: "PathPrefix(`/rooms/`)"
      service: room-service
      entryPoints: [web]
      middlewares: [cors, logging, auth]

    room-create:
      rule: "Path(`/rooms`) && Method(`POST`)"
      service: room-service
      entryPoints: [web]
      middlewares: [cors, logging, auth]

    # Opcional: responde diretamente as OPTIONS de /user/*
    user-options:
      rule: "PathPrefix(`/user/`) && Method(`OPTIONS`)"
      service: noop@internal
      entryPoints: [web]
      middlewares: [cors]

  services:
    auth-service:
      loadBalancer:
        servers:
          - url: "http://auth-service:8081"

    user-service:
      loadBalancer:
        servers:
          - url: "http://user-service:8080"

    room-service:
      loadBalancer:
        servers:
          - url: "http://room-service:8082"
