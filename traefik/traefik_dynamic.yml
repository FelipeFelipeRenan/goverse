http:
  middlewares:
    auth:
      forwardAuth:
        address: "http://auth-middleware:3000/auth/validate"
        trustForwardHeader: true
        authResponseHeaders:
          - "X-User-ID"

    rate-limit:
      rateLimit:
        average: 100
        burst: 50

    cors:
      headers:
        accessControlAllowCredentials: true
        accessControlAllowOriginList:
          - "http://127.0.0.1:4200"
          - "https://goverse-frontend.vercel.app"
          - "http://localhost:4200" # <-- Especifique a origem do seu frontend
        accessControlAllowMethods:
          - GET
          - POST
          - PUT
          - DELETE
          - OPTIONS
        accessControlAllowHeaders:
          - Content-Type
          - Authorization
          - X-User-ID
          - X-CSRF-TOKEN
        addVaryHeader: true

    strict-headers:
      headers:
        browserXssFilter: true
        contentTypeNosniff: true
        
    logging:
      headers:
        customRequestHeaders:
          X-Request-Id: "{uuid}"
    
    strip-user-prefix:
      stripPrefix:
        prefixes:
          - "/user"


  routers:
    # === CORS ===

    cors-preflight:
      rule: "Method(`OPTIONS`)"
      service: noop@internal
      entryPoints: [web]
      priority: 1000
      middlewares: [cors]

    # === Auth Service ===
    auth-me:
      rule: "Path(`/auth/me`) && Method(`GET`)"
      service: auth-service
      entryPoints: [web]
      middlewares: [cors, logging, auth, strict-headers] 
    
    auth-login:
      rule: "Path(`/auth/login`)"
      service: auth-service
      entryPoints: [web]
      middlewares: [cors, logging, strict-headers]

    auth-logout:
      rule: "Path(`/auth/logout`) && Method(`POST`)"
      service: auth-service
      entryPoints: [web]
      middlewares: [cors, logging, strict-headers] # Middlewares consistentes com o login

    oauth-google:
      rule: "Path(`/oauth/google/login`)"
      service: auth-service
      entryPoints: [web]
      middlewares: [cors, logging, strict-headers]

    oauth-callback:
      rule: "Path(`/oauth/google/callback`) && (Method(`GET`) || Method(`OPTIONS`))"
      service: auth-service
      entryPoints: [web]
      middlewares: [cors, logging] # SEM strict-headers aqui!

    # === User Service ===
    user-register:
      rule: "Path(`/user`) && (Method(`POST`) || Method(`OPTIONS`))"
      service: user-service
      entryPoints: [web]
      middlewares: [cors, logging, strict-headers]

    user-getall:
      rule: "Path(`/users`) && (Method(`GET`) || Method(`OPTIONS`))"
      service: user-service
      entryPoints: [web]
      middlewares: [cors, logging, strict-headers]

    user-get:
      rule: "Path(`/user/rooms`) && (Method(`GET`) || Method(`OPTIONS`))"
      service: room-service
      entryPoints: [web]
      middlewares: [cors, logging, auth, strict-headers]

    user-me-update:
      rule: "Path(`/user/me`) && (Method(`PUT`) || Method(`OPTIONS`))"
      service: user-service
      entryPoints: [web]
      middlewares: [cors, logging, auth, strict-headers]

    user-me-delete:
      rule: "Path(`/user/me`) && (Method(`DELETE`) || Method(`OPTIONS`))"
      service: user-service
      entryPoints: [web]
      middlewares: [cors, logging, auth, strict-headers]

    # === Room Service ===
    rooms-list:
      rule: "Path(`/rooms`) && (Method(`GET`) || Method(`OPTIONS`))"
      service: room-service
      entryPoints: [web]
      middlewares: [cors, logging, strict-headers]

    rooms-mine:
      rule: "Path(`/rooms/mine`) && (Method(`GET`) || Method(`OPTIONS`))"
      service: room-service
      entryPoints: [web]
      middlewares: [cors, logging, auth, strict-headers]

    room-create:
      rule: "Path(`/rooms`) && (Method(`POST`) || Method(`OPTIONS`))"
      service: room-service
      entryPoints: [web]
      middlewares: [cors, logging, auth, strict-headers]

    rooms-prefix:
      rule: "PathPrefix(`/rooms/`)"
      service: room-service
      entryPoints: [web]
      middlewares: [cors, logging, auth, strict-headers]

      
    user-get-by-id:
      rule: "Path(`/user/{id:[0-9]+}`) && (Method(`GET`) || Method(`OPTIONS`))"      
      service: user-service
      entryPoints: [web]
      middlewares: [cors, logging, auth, strict-headers] 

    traefik-dashboard:
      rule: "PathPrefix(`/dashboard`) || PathPrefix(`/api`)"
      service: api@internal
      entryPoints:
        - dashboard

  services:
    auth-service:
      loadBalancer:
        servers:
          - url: "http://auth-service:8080"

    user-service:
      loadBalancer:
        servers:
        - url: "http://user-service:8085"

    room-service:
      loadBalancer:
        servers:
          - url: "http://room-service:8080"
