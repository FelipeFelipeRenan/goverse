services:
  postgres:
    image: postgres:16
    container_name: goverse_postgres
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - goverse_network

  redis:
    image: redis:alpine
    volumes:
      - redis_data:/data
    networks:
      - goverse_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3

  user-service:
    build:
      context: .
      dockerfile: ./user-service/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./user-service/.env:/app/.env
    networks:
      - goverse_network
    expose:
      - "8085"
    labels:
      - "traefik.enable=true"

  auth-service:
    build:
      context: .
      dockerfile: ./auth-service/Dockerfile
    depends_on:
      - user-service
    volumes:
      - ./auth-service/.env:/app/.env
      - ./.keys/private.pem:/keys/private.pem:ro
    networks:
      - goverse_network
    expose:
      - "8080"
    labels:
      - "traefik.enable=true"

  room-service:
    build:
      context: .
      dockerfile: ./room-service/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      user-service:
        condition: service_started
    volumes:
      - ./room-service/.env:/app/.env
    networks:
      - goverse_network
    expose:
      - "8080"
    labels:
      - "traefik.enable=true"

  chat-service:
    build:
      context: .
      dockerfile: ./chat-service/Dockerfile
    # depends_on:
      # Adicione dependências se ele precisar de outros serviços para iniciar
      # postgres:
      #   condition: service_healthy
    # volumes:
      # - ./chat-service/.env:/app/.env # Descomente se você adicionar um .env
    networks:
      - goverse_network
    expose:
      - "8084" # Porta interna do serviço
    labels:
      - "traefik.enable=true"
  # --- FIM DO NOVO SERVIÇO ---

  auth-middleware:
    build:
      context: ./auth-middleware
      dockerfile: Dockerfile
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    environment:
      - PORT=3000
      - JWT_PUBLIC_KEY_PATH=/keys/public.pem
    ports:
      - "3000:3000"
    volumes:
      - ./.keys/public.pem:/keys/public.pem:ro
    networks:
      - goverse_network

  traefik:
    image: traefik:v2.11
    container_name: traefik
    depends_on:
      auth-middleware:
        condition: service_healthy
    command:
      - --entrypoints.web.address=:80
      - --entrypoints.metrics.address=:8082
      - --providers.docker=true
      - --providers.docker.exposedByDefault=false
      - --providers.file.directory=/etc/traefik
      - --providers.file.watch=true
      - --api.dashboard=true
      - --metrics.prometheus=true
    ports:
      - "${TRAEFIK_HTTP_PORT}:80"
      - "8080:8080"
      - "8082:8082"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./traefik/traefik_dynamic.yml:/etc/traefik/traefik_dynamic.yml:ro
    networks:
      - goverse_network

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - goverse_network

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/datasources:/etc/grafana/provisioning/datasources
    networks:
      - goverse_network

  node-exporter:
    image: prom/node-exporter
    container_name: node-exporter
    ports:
      - "9100:9100"
    networks:
      - goverse_network
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 100M


volumes:
  pgdata:
  redis_data:
  grafana_data:

networks:
  goverse_network:
    driver: bridge