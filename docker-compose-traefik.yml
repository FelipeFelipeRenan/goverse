services:
  postgres:
    image: postgres:16
    container_name: goverse_postgres
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - goverse_network

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    networks:
      - goverse_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3
    volumes:
      - redis_data:/data

  user-service:
    build:
      context: .
      dockerfile: ./user-service/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    volumes: 
      - ./user-service/.env:/app/.env
    networks:
      - goverse_network
    ports:
      - "8085:8085"  # ADICIONADO: expõe porta do user-service
    labels:
      - "traefik.enable=true"

  auth-service:
    build:
      context: .
      dockerfile: ./auth-service/Dockerfile
    depends_on:
      - user-service
    volumes:
      - ./auth-service/.env:/app/.env
    networks:
      - goverse_network
    ports:
      - "8081:8080"  # ADICIONADO: expõe porta do auth-service
    labels:
      - "traefik.enable=true"

  room-service:
    build:
      context: .
      dockerfile: ./room-service/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
      user-service:
        condition: service_started
    volumes:
      - ./room-service/.env:/app/.env
    networks:
      - goverse_network
    ports:
      - "8082:8080"  # ADICIONADO: expõe porta do room-service
    labels:
      - "traefik.enable=true"

  auth-middleware:
    build:
      context: ./auth-middleware
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - PORT=3000
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - goverse_network

  traefik:
    image: traefik:v2.11
    container_name: traefik
    command:
      - --entrypoints.web.address=:80
      - --providers.docker=true
      - --providers.docker.exposedByDefault=false
      - --providers.file.directory=/etc/traefik
      - --providers.file.watch=true
      - --api.dashboard=true
    ports:
      - "${TRAEFIK_HTTP_PORT}:80"
      - "8080:8080"  # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./traefik/traefik_dynamic.yml:/etc/traefik/traefik_dynamic.yml:ro
    networks:
      - goverse_network
  
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - goverse_network

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3001:3000"
    networks:
      - goverse_network
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/dashboards:/etc/grafana/provisioning/dashboards  # opcional
      - ./monitoring/datasources:/etc/grafana/provisioning/datasources
      


volumes:
  pgdata:
  redis_data:
  grafana_data:

networks:
  goverse_network:
    driver: bridge
