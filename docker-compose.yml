services:
  postgres:
    image: postgres:16
    container_name: goverse_postgres
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - goverse_network

  user-service:
    build:
      context: .
      dockerfile: ./user-service/Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
    volumes: 
    - ./user-service/.env:/app/.env
    ports:
      - "${USER_SERVICE_PORT}:8080"
      - "50051:50051"
    networks:
      - goverse_network

  auth-service:
    build:
      context: .
      dockerfile: ./auth-service/Dockerfile
    depends_on:
      - user-service
    volumes:
      - ./auth-service/.env:/app/.env
    ports:
      - "${AUTH_SERVICE_PORT}:8081"
    environment:
      - USER_SERVICE_GRPC_ADDR=user-service:8080
      - JWT_SECRET={JWT_SECRET}
    networks:
      - goverse_network
  
  api-gateway:
    build:
      context: .
      dockerfile: api-gateway/Dockerfile
    ports:
      - "8088:8080"
    depends_on:
      - auth-service
      - user-service
    environment:
      - GATEWAY_PORT=8080
    networks:
      - goverse_network

volumes:
  pgdata:

networks:
  goverse_network:
    driver: bridge
